import { Contact } from './contact';
import axios from "axios";
import { Phones } from './phones';
import { Addresses } from './addresses';
import { Emails } from './emails';

export default class ContactProcessor {
    async getContact(): Promise<Contact[]>{
        return new Promise((resolve, reject) => {
        axios.get("api/data/all").then((result) => {
            const output: Contact[] = result.data.map((element: any): Contact => ({
                id: element.data.id,
                name1: element.data.name1,
                name2: element.data.name2,
                surname1: element.data.surname1,
                surname2: element.data.surname2,
                birthday: element.data.data,
                company: element.data.company,
                notes: element.data.notes,
                photo: element.data.photo,
                phones: element.phones,
                addresses: element.addresses,
                emails: element.emails
            }));
            resolve(output);
        });
    });
    }

    async save(contact: Contact): Promise<boolean>{
        return new Promise((resolve,reject) => {
            axios.post(`api/data/`,contact).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            })
        })
    }

    async update(contact: Contact): Promise<boolean>{
        return new Promise((resolve,reject) => {
            axios.post(`api/data/update`,contact).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            })
        })
    }

    async remove(id:Number) : Promise<boolean>{
        return new Promise((resolve,reject) => {
            axios.post(`api/data/delete/${id}`).then((response) => {
                resolve(response.data);
            }).catch((error)=> {
                reject(error);
            })    
        }) 
    }
    async removePhone(phone:Phones): Promise<boolean>{
        return new Promise((resolve,reject) => {
            axios.post(`api/data/delete/${phone.phoneNumberID}`).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            })
        })
    }

    async removeEmail(emails:Emails): Promise<boolean>{
        return new Promise((resolve,reject) => {
            axios.post(`api/data/delete/${emails.emailID}`).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            })
        })
    }

    async get(id:Number) : Promise<Contact>{
        return new Promise((resolve,reject) => {
            axios.get(`api/contactapi/${id}`).then((response)=>{
                const contact:Contact = {
                    id: response.data.id,
                    name1: response.data.name1,
                    name2: response.data.name2,
                    surname1: response.data.surname1,
                    surname2: response.data.surname2,
                    birthday: response.data.data,
                    company: response.data.company,
                    notes: response.data.notes,
                    photo: response.data.photo,
                    phones: response.data.phones.map((phone) => ({
                        phoneNumberID: phone.phoneNumberID,
                        contactId: phone.contactId,
                        phoneNumber: phone.phoneNumber,
                        type: phone.type
                        })
                    ),
                    addresses: response.data.addresses.map((address) => ({
                        addressID: address.addressID,
                        contactId: address.contactId,              
                        city: address.city,
                        street: address.street,
                        houseNumber: address.houseNumber,
                        postalCode: address.postalCode,
                        })
                    ),
                    emails: response.data.emails.map((email) => ({
                        emailID: email.emailID,
                        contactId: email.contactId,
                        emailAddress: email.emailAddress,
                        type: email.type
                        })
                    )
                }
                resolve(contact);
            }).catch((error) => {
                reject(error);
            })
        })
    }
}