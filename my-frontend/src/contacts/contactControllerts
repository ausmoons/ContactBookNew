import axios from "axios";
export default class ContactProcessor {
    async getContacts() {
        return new Promise((resolve, reject) => {
            axios.get("api/data/all").then((result) => {
                const output = result.data.map((element) => ({
                    id: element.data.id,
                name1: element.data.name1,
                name2: element.data.name2,
                surname1: element.data.surname1,
                surname2: element.data.surname2,
                birthday: element.data.data,
                company: element.data.company,
                notes: element.data.notes,
                photo: element.data.photo,
                phoneNumbers: element.phoneNumbers,
                addresses: element.addresses,
                emails: element.emails
                }));
                resolve(output);
            });
        });
    }
    async save(contact) {
        return new Promise((resolve, reject) => {
            axios.post(`api/data/`, contact).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            });
        });
    }
    async update(contacts) {
        return new Promise((resolve, reject) => {
            axios.post(`api/data/update`, contacts).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            });
        });
    }
    async remove(id) {
        return new Promise((resolve, reject) => {
            axios.post(`api/data/delete/${id}`).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            });
        });
    }
    async removePhone(phoneNumbers) {
        return new Promise((resolve, reject) => {
            axios.post(`api/data/delete/${phoneNumbers.phoneNumberID}`).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            });
        });
    }
    async removeEmail(emails) {
        return new Promise((resolve, reject) => {
            axios.post(`api/data/delete/${emails.emailID}`).then((response) => {
                resolve(response.data);
            }).catch((error) => {
                reject(error);
            });
        });
    }
    async get(id) {
        return new Promise((resolve, reject) => {
            axios.get(`api/data/${id}`).then((response) => {
                const contact = {
                    id: response.data.id,
                    name1: response.data.name1,
                    name2: response.data.name2,
                    surname1: response.data.surname1,
                    surname2: response.data.surname2,
                    birthday: response.data.data,
                    company: response.data.company,
                    notes: response.data.notes,
                    photo: response.data.photo,
                    phoneNumbers: response.data.phoneNumbers.map((phoneNumber) => ({
                        phoneNumberID: phoneNumber.phoneNumberID,
                        contactId: phoneNumber.contactId,
                        phoneNumber: phoneNumber.phoneNumber,
                        type: phoneNumber.type
                    })),
                    addresses: response.data.addresses.map((address) => ({
                        addressID: address.addressID,
                        contactId: address.contactId,              
                        city: address.city,
                        street: address.street,
                        houseNumber: address.houseNumber,
                        postalCode: address.postalCode,
                    })),
                    emails: response.data.emails.map((email) => ({
                        emailID: email.emailID,
                        contactId: email.contactId,
                        emailAddress: email.emailAddress,
                        type: email.type
                    }))
                };
                resolve(contact);
            }).catch((error) => {
                reject(error);
            });
        });
    }
}
